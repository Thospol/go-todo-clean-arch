// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Thospol/go-todo-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// ToDoUseCase is an autogenerated mock type for the ToDoUseCase type
type ToDoUseCase struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: t
func (_m *ToDoUseCase) CreateTodo(t *domain.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: t, id
func (_m *ToDoUseCase) DeleteTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodo provides a mock function with given fields:
func (_m *ToDoUseCase) GetAllTodo() ([]domain.Todo, error) {
	ret := _m.Called()

	var r0 []domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: t, id
func (_m *ToDoUseCase) GetTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: t, id
func (_m *ToDoUseCase) UpdateTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewToDoUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewToDoUseCase creates a new instance of ToDoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewToDoUseCase(t mockConstructorTestingTNewToDoUseCase) *ToDoUseCase {
	mock := &ToDoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
