// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Thospol/go-todo-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// ToDoRepository is an autogenerated mock type for the ToDoRepository type
type ToDoRepository struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: t
func (_m *ToDoRepository) CreateTodo(t *domain.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: t, id
func (_m *ToDoRepository) DeleteTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodo provides a mock function with given fields: t
func (_m *ToDoRepository) GetAllTodo(t *[]domain.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]domain.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: t, id
func (_m *ToDoRepository) GetTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: t, id
func (_m *ToDoRepository) UpdateTodo(t *domain.Todo, id string) error {
	ret := _m.Called(t, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Todo, string) error); ok {
		r0 = rf(t, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewToDoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewToDoRepository creates a new instance of ToDoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewToDoRepository(t mockConstructorTestingTNewToDoRepository) *ToDoRepository {
	mock := &ToDoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
